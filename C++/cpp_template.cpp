// Copyright (c) 2023 Ziga Miklosic
// All Rights Reserved
// This software is under MIT licence (https://opensource.org/licenses/MIT)
////////////////////////////////////////////////////////////////////////////////
/**
*@file      cpp_template.cpp
*@brief     C++ source code template for general use
*@author    Ziga Miklosic
*@email     ziga.miklosic@gmail.com
*@date      xx.xx.xxxx
*@version   Vx.x.x
*/
////////////////////////////////////////////////////////////////////////////////
/*!
* @addtogroup "TEMPLATE"
* @{ <!-- BEGIN GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Variables
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Function prototypes
////////////////////////////////////////////////////////////////////////////////
static ring_buffer_status_t ring_buffer_default_setup	(p_ring_buffer_t ring_buffer, const uint32_t size);

////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/*!
* @brief    	Default setup
*
* @note			Default initialization of ring buffer:
*					- dynamicall alocation
*					- size of element = 1
*					- name = NULL
*
* @param[out]  	ring_buffer	- Pointer to ring buffer instance
* @param[in]	size		- Size of buffer
* @return       status		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static ring_buffer_status_t ring_buffer_default_setup(p_ring_buffer_t ring_buffer, const uint32_t size)
{
	ring_buffer_status_t status = eRING_BUFFER_OK;

	// Default item size
	ring_buffer->size_of_item = 1;

	// Allocate memory
	ring_buffer->p_data = malloc( size );

	// Allocation success
	if ( NULL != ring_buffer->p_data )
	{
		// Clear buffer data
		status = ring_buffer_clear_mem( ring_buffer );
	}
	else
	{
		status = eRING_BUFFER_ERROR_MEM;
	}

	return status;
}


////////////////////////////////////////////////////////////////////////////////
/**
* @} <!-- END GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/**
*@addtogroup "TEMPLATE"_API
* @{ <!-- BEGIN GROUP -->
*
* 	Following function are part of "TEMPLATE" API.
*/
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
/*!
* @brief    	Template Class Constructor
*
* @param[in]	p_name	- Name of class
* @return       void
*/
////////////////////////////////////////////////////////////////////////////////
TemplateClass::TemplateClass(const char * p_name)
{

}

////////////////////////////////////////////////////////////////////////////////
/*!
* @brief    	Template Class Desctructor
*
* @param[in]	p_name	- Name of class
* @return       void
*/
////////////////////////////////////////////////////////////////////////////////
TemplateClass::~TemplateClass(void)
{

}


////////////////////////////////////////////////////////////////////////////////
/**
* @} <!-- END GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////
